/* Shared definitions */

input,
input[type=submit],
button,
.c-button {
  display: inline-block;
  line-height: inherit;
  padding: 0;
  background: transparent;
  color: inherit;
  border-radius: 0;

  &,
  &::before,
  &::after {
    content: initial;
    border-color: currentColor;
    border-style: solid;
    border-width: $divider-width;
  }

  &:focus {
    outline: none;
  }

  &:disabled,
  &.is-disabled {
    cursor: not-allowed;

    &,
    &:hover,
    &:focus,
    &:active {
      background: transparent;
      opacity: map-deep-get($form-states-transparency, 'input', 'disabled');

      &,
      &::before,
      &::after {
        border-style: dotted;
      }

    }

  }

  &.on-error {

    &,
    &:hover,
    &:focus,
    &:active {
      border-color: map-deep-get($meaningful-colors, 'error');
      color: map-deep-get($meaningful-colors, 'error');
    }

  }

}

input,
input[type=submit] {
  line-height: calc(var(--local-line-height) - 2 * #{$divider-width});
  padding-left: calc((var(--local-line-height) - var(--local-font-size)) / 2 - #{$divider-width});
  padding-right: calc((var(--local-line-height) - var(--local-font-size)) / 2 - #{$divider-width});
}

/* Button */

input[type=submit],
button,
.c-button {
  text-transform: uppercase;
  text-align: center;
  cursor: pointer;
}

input[type=submit] {
  opacity: map-deep-get($form-states-transparency, 'button', 'default');

  &:hover:not(.in-progress):not(:disabled):not(.is-disabled),
  &:focus:not(.in-progress):not(:disabled):not(.is-disabled) {
    opacity: map-deep-get($form-states-transparency, 'button', 'hover');
  }

  &:active:not(.in-progress):not(:disabled):not(.is-disabled) {
    opacity: map-deep-get($form-states-transparency, 'button', 'active');
  }

  &.in-progress {
    cursor: wait;
    
    animation-timing-function: ease-in-out;
     
    
        animation: pulsate 0.75s infinite;


  }

  &.c-button--muted {

    &:not(.in-progress) {
      border-color: transparent;
    }
    
    &:hover:not(:disabled):not(.is-disabled),
    &:focus:not(:disabled):not(.is-disabled),
    &:active:not(:disabled):not(.is-disabled) {
      border-color: currentColor;
    }

  }

}

button,
.c-button {
  position: relative;
  padding-left: calc((var(--local-line-height) - var(--local-font-size)) / 2);
  padding-right: calc((var(--local-line-height) - var(--local-font-size)) / 2);
  border-width: 0;

  &::before,
  &::after {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  &::before,
  &::after {
    opacity: map-deep-get($form-states-transparency, 'button', 'default');
  }

  &::after {
    content: '';
  }

  &:hover:not(.in-progress):not(:disabled):not(.is-disabled),
  &:focus:not(.in-progress):not(:disabled):not(.is-disabled) {

    &::before,
    &::after {
      opacity: map-deep-get($form-states-transparency, 'button', 'hover'); 
    }

  }

  &:active:not(.in-progress):not(:disabled):not(.is-disabled) {
    
    &::before,
    &::after {
      opacity: map-deep-get($form-states-transparency, 'button', 'active');
    }

  }

  &--muted {
  
    &:not(.in-progress) {

      &::before,
      &::after {
        opacity: 0;
      }

    }

  }

  &.in-progress {

    &,
    &:hover,
    &:focus,
    &:active {

      &,
      &::before,
      &::after {
        cursor: wait;
      }

      &::before,
      &::after {
        border-width: 0;
        animation-timing-function: ease-in-out;
        content: '';
      }

      &::before {
        animation: top-right-border 3s infinite;
        border-top-width: $divider-width;
        border-right-width: $divider-width;
      }

      &::after {
        animation: bottom-left-border 3s infinite;
        border-bottom-width: $divider-width;
        border-left-width: $divider-width;
      }

    }

  }

}
