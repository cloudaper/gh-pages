@mixin generate-variable-media-queries($variables, $round: false) {

  @include _generate-from-map($variables, 'default');

  @each $scale, $value in $modular-scale {
    
    @if $scale != 'default' {

      $min-max: null;

      @if index(('small', 'smaller', 'smallest'), $scale) {
        $min-max: 'max';
      }
      @else if index(('large', 'larger', 'largest'), $scale) {
        $min-max: 'min';
      }
      
      $conditions: ();
      
      @if map-has-key(map-deep-get($breakpoints, 'width'), $scale) {
        $conditions: append($conditions, 'width');
      }
      @if map-has-key(map-deep-get($breakpoints, 'height'), $scale) {
        $conditions: append($conditions, 'height');
      }

      @each $condition in $conditions {

        @if index(map-keys(map-deep-get($breakpoints, $condition)), $scale) == 1 and $min-max == 'max' {

          @media screen and (#{$min-max}-#{$condition}: map-deep-get($breakpoints, $condition, $scale)) {
            @include _generate-from-map($variables, $scale);
          }

        }
        @else if index(map-keys(map-deep-get($breakpoints, $condition)), $scale) == length(map-keys(map-deep-get($breakpoints, $condition))) and $min-max == 'min' {

          @media screen and (#{$min-max}-#{$condition}: map-deep-get($breakpoints, $condition, $scale)) {
            @include _generate-from-map($variables, $scale);
          }

        }
        @else {

          @if $min-max == 'max' {

            $previous-scale-index: index(map-keys(map-deep-get($breakpoints, $condition)), $scale) - 1;
            $previous-scale: nth(nth(map-deep-get($breakpoints, $condition), $previous-scale-index), 1);
           
            @media screen
              and (max-#{$condition}: map-deep-get($breakpoints, $condition, $scale))
              and (min-#{$condition}: map-deep-get($breakpoints, $condition, $previous-scale) + 1) {
              @include _generate-from-map($variables, $scale);
            }

          }
          @else if $min-max == 'min' {

            $next-scale-index: index(map-keys(map-deep-get($breakpoints, $condition)), $scale) + 1;
            $next-scale: nth(nth(map-deep-get($breakpoints, $condition), $next-scale-index), 1);

            @media screen
              and (min-#{$condition}: map-deep-get($breakpoints, $condition, $scale))
              and (max-#{$condition}: map-deep-get($breakpoints, $condition, $next-scale) - 1) {
              @include _generate-from-map($variables, $scale);
            }

          }

        }
        
      }

    }

    
  }

}

@mixin _generate-from-map($variables, $scale) {

  :root {

    @each $variable in $variables {

      $map: nth($variable, 1);
      $prefix: nth($variable, 2);
      $unit: nth($variable, 3);

      @if $unit {
        @if $unit == 'round' {
          @include generate-unit-variables($map, $prefix, $scale, true);
        }
        @else {
          @include generate-unit-variables($map, $prefix, $scale, false);
        }
      }
      @else {
        @if map-has-key($map, $scale) {
          @include generate-variables(map-deep-get($map, $scale), $prefix);
        }
      }

    }

  }

}
